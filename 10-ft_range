Assignment name  : ft_range
Expected files   : ft_range.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write the following function:

int     *ft_range(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at start and end at end (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 1, 2 and 3.
- With (-1, 2) you will return an array containing -1, 0, 1 and 2.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing 0, -1, -2 and -3.

Here's an implementation of the `ft_range` function in C:

```c
#include <stdlib.h>

int *ft_range(int start, int end) {
    int size = abs(end - start) + 1;
    int *range = (int *)malloc(size * sizeof(int));
    if (range == NULL) {
        return NULL;
    }

    int increment = (start <= end) ? 1 : -1;
    int value = start;
    for (int i = 0; i < size; i++) {
        range[i] = value;
        value += increment;
    }

    return range;
}
```

The `ft_range` function takes two integers, `start` and `end`, and returns a dynamically allocated array of integers filled with consecutive values from `start` to `end`, including both `start` and `end` in the array.

To calculate the size of the array, we take the absolute difference between `end` and `start` and add 1. We then allocate memory for the array using `malloc` and check if the allocation was successful. If not, we return `NULL`.

We determine the increment value based on whether `start` is less than or equal to `end`. If it is, we set the increment to 1; otherwise, we set it to -1. This determines whether we are counting up or down in the array.

We initialize a variable `value` to `start` and use a loop to fill the array with consecutive values. For each index in the array, we assign `value` to that index and update `value` by adding the increment.

Finally, we return the pointer to the first value of the array.

Remember to include the necessary header file (`<stdlib.h>`) and free the allocated memory when you are done using the array to avoid memory leaks.
